
        _hub_
 first line shows the keywords in association with the current value
 second line shows the syntax-symbols between the '
    ('rex_bulk_begin'rex_separator'rex_bulk_end'done')
 arrow in left upper corner shows the state

        _keywords_
 rex     : regular expression for actual state
             can be 2D to 3D
 @       : second expression
             in file state: check truth in path
             in path state: check truth in files
             can be 1D to 2D
 gob     : get on buffer
 syntax  : followed by new syntax definition
             starting, separated and ending by current Separator (2)
 help

        _gob_
 edit content of current state on buffer in iteration
 when combined with rex: rex-modifications are processed firs
 to collect the gob-modified content:
    current state must be confirmed immediately
    otherwise the gob-modifications will be reset
 the iteration can be interrupted by ^C, modifications are retained

        _expressions_
 rex
     2D: [expression, replacement]
     3D: [expression, replacement, expression]
            (replace a to b in c)
 @
     1D: [expression]
     2D: [expression, expression]
            (if a in b)

        _syntax_(symbols mutable)
 'rex<expr~repl>'       ' #'[key]
 'rex<expr~repl~expr>'  'syntax~begin~sep~end~done~'
 '@<expr>'              'gob<'
 '@<expr~expr>'

        _examples_
match all (and no replace)  : <~> (<~~>)
pre_folder_prefix           : </~/prefix~/*[^/]*.$>
append_suffix               : <$~suffix>
replace_suffix              : <\.end$~.new_end>

rex<expr~repl~expr~>@<expr~expr>gob< #key
syntax~start~sep~end~done~
